// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository_interfaces/task.go

// Package mock_repository_interfaces is a generated GoMock package.
package mock_repository_interfaces

import (
	models "lab3/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockITaskRepository is a mock of ITaskRepository interface.
type MockITaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITaskRepositoryMockRecorder
}

// MockITaskRepositoryMockRecorder is the mock recorder for MockITaskRepository.
type MockITaskRepositoryMockRecorder struct {
	mock *MockITaskRepository
}

// NewMockITaskRepository creates a new mock instance.
func NewMockITaskRepository(ctrl *gomock.Controller) *MockITaskRepository {
	mock := &MockITaskRepository{ctrl: ctrl}
	mock.recorder = &MockITaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITaskRepository) EXPECT() *MockITaskRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITaskRepository) Create(task *models.Task) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", task)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockITaskRepositoryMockRecorder) Create(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITaskRepository)(nil).Create), task)
}

// Delete mocks base method.
func (m *MockITaskRepository) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockITaskRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITaskRepository)(nil).Delete), id)
}

// GetAllTasks mocks base method.
func (m *MockITaskRepository) GetAllTasks() ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTasks")
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTasks indicates an expected call of GetAllTasks.
func (mr *MockITaskRepositoryMockRecorder) GetAllTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTasks", reflect.TypeOf((*MockITaskRepository)(nil).GetAllTasks))
}

// GetTaskByID mocks base method.
func (m *MockITaskRepository) GetTaskByID(id uuid.UUID) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByID", id)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskByID indicates an expected call of GetTaskByID.
func (mr *MockITaskRepositoryMockRecorder) GetTaskByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByID", reflect.TypeOf((*MockITaskRepository)(nil).GetTaskByID), id)
}

// GetTaskByName mocks base method.
func (m *MockITaskRepository) GetTaskByName(name string) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByName", name)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskByName indicates an expected call of GetTaskByName.
func (mr *MockITaskRepositoryMockRecorder) GetTaskByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByName", reflect.TypeOf((*MockITaskRepository)(nil).GetTaskByName), name)
}

// GetTasksInCategory mocks base method.
func (m *MockITaskRepository) GetTasksInCategory(category int) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksInCategory", category)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksInCategory indicates an expected call of GetTasksInCategory.
func (mr *MockITaskRepositoryMockRecorder) GetTasksInCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksInCategory", reflect.TypeOf((*MockITaskRepository)(nil).GetTasksInCategory), category)
}

// Update mocks base method.
func (m *MockITaskRepository) Update(task *models.Task) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", task)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockITaskRepositoryMockRecorder) Update(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITaskRepository)(nil).Update), task)
}
