// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository_interfaces/order.go

// Package mock_repository_interfaces is a generated GoMock package.
package mock_repository_interfaces

import (
	models "lab3/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIOrderRepository is a mock of IOrderRepository interface.
type MockIOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderRepositoryMockRecorder
}

// MockIOrderRepositoryMockRecorder is the mock recorder for MockIOrderRepository.
type MockIOrderRepositoryMockRecorder struct {
	mock *MockIOrderRepository
}

// NewMockIOrderRepository creates a new mock instance.
func NewMockIOrderRepository(ctrl *gomock.Controller) *MockIOrderRepository {
	mock := &MockIOrderRepository{ctrl: ctrl}
	mock.recorder = &MockIOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderRepository) EXPECT() *MockIOrderRepositoryMockRecorder {
	return m.recorder
}

// AddTaskToOrder mocks base method.
func (m *MockIOrderRepository) AddTaskToOrder(orderID, taskID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTaskToOrder", orderID, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTaskToOrder indicates an expected call of AddTaskToOrder.
func (mr *MockIOrderRepositoryMockRecorder) AddTaskToOrder(orderID, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTaskToOrder", reflect.TypeOf((*MockIOrderRepository)(nil).AddTaskToOrder), orderID, taskID)
}

// Create mocks base method.
func (m *MockIOrderRepository) Create(order *models.Order, orderedTasks []models.OrderedTask) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", order, orderedTasks)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIOrderRepositoryMockRecorder) Create(order, orderedTasks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIOrderRepository)(nil).Create), order, orderedTasks)
}

// Delete mocks base method.
func (m *MockIOrderRepository) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIOrderRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIOrderRepository)(nil).Delete), id)
}

// Filter mocks base method.
func (m *MockIOrderRepository) Filter(params map[string]string) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", params)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockIOrderRepositoryMockRecorder) Filter(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockIOrderRepository)(nil).Filter), params)
}

// GetAllOrdersByUserID mocks base method.
func (m *MockIOrderRepository) GetAllOrdersByUserID(id uuid.UUID) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrdersByUserID", id)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrdersByUserID indicates an expected call of GetAllOrdersByUserID.
func (mr *MockIOrderRepositoryMockRecorder) GetAllOrdersByUserID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrdersByUserID", reflect.TypeOf((*MockIOrderRepository)(nil).GetAllOrdersByUserID), id)
}

// GetCurrentOrderByUserID mocks base method.
func (m *MockIOrderRepository) GetCurrentOrderByUserID(id uuid.UUID) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentOrderByUserID", id)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentOrderByUserID indicates an expected call of GetCurrentOrderByUserID.
func (mr *MockIOrderRepositoryMockRecorder) GetCurrentOrderByUserID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentOrderByUserID", reflect.TypeOf((*MockIOrderRepository)(nil).GetCurrentOrderByUserID), id)
}

// GetOrderByID mocks base method.
func (m *MockIOrderRepository) GetOrderByID(id uuid.UUID) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", id)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockIOrderRepositoryMockRecorder) GetOrderByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockIOrderRepository)(nil).GetOrderByID), id)
}

// GetTaskQuantity mocks base method.
func (m *MockIOrderRepository) GetTaskQuantity(orderID, taskID uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskQuantity", orderID, taskID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskQuantity indicates an expected call of GetTaskQuantity.
func (mr *MockIOrderRepositoryMockRecorder) GetTaskQuantity(orderID, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskQuantity", reflect.TypeOf((*MockIOrderRepository)(nil).GetTaskQuantity), orderID, taskID)
}

// GetTasksInOrder mocks base method.
func (m *MockIOrderRepository) GetTasksInOrder(id uuid.UUID) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksInOrder", id)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksInOrder indicates an expected call of GetTasksInOrder.
func (mr *MockIOrderRepositoryMockRecorder) GetTasksInOrder(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksInOrder", reflect.TypeOf((*MockIOrderRepository)(nil).GetTasksInOrder), id)
}

// RemoveTaskFromOrder mocks base method.
func (m *MockIOrderRepository) RemoveTaskFromOrder(orderID, taskID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTaskFromOrder", orderID, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTaskFromOrder indicates an expected call of RemoveTaskFromOrder.
func (mr *MockIOrderRepositoryMockRecorder) RemoveTaskFromOrder(orderID, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTaskFromOrder", reflect.TypeOf((*MockIOrderRepository)(nil).RemoveTaskFromOrder), orderID, taskID)
}

// Update mocks base method.
func (m *MockIOrderRepository) Update(order *models.Order) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", order)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIOrderRepositoryMockRecorder) Update(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIOrderRepository)(nil).Update), order)
}

// UpdateTaskQuantity mocks base method.
func (m *MockIOrderRepository) UpdateTaskQuantity(orderID, taskID uuid.UUID, quantity int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskQuantity", orderID, taskID, quantity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskQuantity indicates an expected call of UpdateTaskQuantity.
func (mr *MockIOrderRepositoryMockRecorder) UpdateTaskQuantity(orderID, taskID, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskQuantity", reflect.TypeOf((*MockIOrderRepository)(nil).UpdateTaskQuantity), orderID, taskID, quantity)
}
